import streamlit as st

def show_about():
    st.title("Sobre o Projeto")

    st.markdown("""
    <h1 style='color: #007BFF;'>Sobre o Projeto</h1>
    <p style='color: #FFFFFF;'>Este aplicativo utiliza um modelo de detec√ß√£o de objetos baseado na arquitetura MobileNetSSD. O modelo foi treinado para identificar diversas classes, incluindo, mas n√£o se limitando a avi√µes, bicicletas, p√°ssaros, barcos, portas, √¥nibus, carros, gatos, cadeiras, vacas, mesas de jantar, cachorros, cavalos, motos, pessoas, plantas em vasos, ovelhas, sof√°s, trens e monitores de TV. üåçüì∑</p>
    
    <h2 style='color: #007BFF;'>Funcionalidades:</h2>
    <p style='color: #FFFFFF;'> 
    Detec√ß√£o em Tempo Real: O aplicativo √© capaz de processar v√≠deos em tempo real, identificando e destacando objetos presentes no campo de vis√£o. üé•üëÅÔ∏è<br>
    Porcentagem de Confian√ßa: A porcentagem de confian√ßa associada a cada detec√ß√£o √© exibida, indicando o qu√£o seguro o modelo est√° da presen√ßa do objeto identificado. üìäü§ñ
    </p>

    <h2 style='color: #007BFF;'>Instru√ß√µes de Uso:</h2>
    <p style='color: #FFFFFF;'> 
    1. Fa√ßa o upload de um v√≠deo nos formatos suportados (mp4, avi).<br>
    2. Aguarde o processamento do v√≠deo e observe a detec√ß√£o de objetos em tempo real.<br>
    3. Ajuste o limiar de confian√ßa conforme necess√°rio para otimizar a sensibilidade da detec√ß√£o. ‚öôÔ∏è
    </p>

    <h2 style='color: #007BFF;'>Tecnologias Utilizadas:</h2>
    <p style='color: #FFFFFF;'> 
    Este aplicativo foi desenvolvido utilizando as seguintes tecnologias:<br>
    - Streamlit: Uma biblioteca para a cria√ß√£o de aplicativos web interativos usando Python.<br>
    - OpenCV: Uma biblioteca de vis√£o computacional que fornece ferramentas para processamento de imagem e v√≠deo.<br>
    - MobileNetSSD: Um modelo de detec√ß√£o de objetos leve e eficiente para uso em dispositivos m√≥veis. üñ•Ô∏èü§ñ
    </p>

    <h2 style='color: #007BFF;'>Desenvolvedor:</h2>
    <p style='color: #FFFFFF;'> 
    Este aplicativo foi desenvolvido por Thaleson Silva. Sou apaixonado por intelig√™ncia artificial e vis√£o computacional, e este projeto √© resultado do interesse em tornar essas tecnologias mais acess√≠veis. Espero que voc√™ aproveite a experi√™ncia de explorar o mundo da detec√ß√£o de objetos com este aplicativo. üöÄ<br>
    Agradecemos por usar nosso aplicativo e ficamos abertos a feedbacks e sugest√µes para melhorias futuras. Divirta-se explorando a detec√ß√£o de objetos! üôå
    </p>

    <h2 style='color: #007BFF;'>Como o Modelo Foi Treinado:</h2>
    <p style='color: #FFFFFF;'> 
    O modelo MobileNetSSD foi treinado utilizando um conjunto de dados de imagens rotuladas, o que inclui as seguintes etapas:</p>
    
    <h3 style='color: #007BFF;'>1. Prepara√ß√£o dos Dados:</h3>
    <p style='color: #FFFFFF;'> 
    Os dados foram preparados a partir de imagens rotuladas em um formato compat√≠vel com o modelo. Abaixo est√° um exemplo de como os dados foram convertidos para o formato de entrada do modelo:
    </p>

    ```python
    import cv2
    import numpy as np

    # Fun√ß√£o para converter imagens em blobs
    def preprocess_image(image_path):
        image = cv2.imread(image_path)
        blob = cv2.dnn.blobFromImage(image, 0.007843, (300, 300), 127.5)
        return blob
    ```

    <h3 style='color: #007BFF;'>2. Configura√ß√£o do Modelo:</h3>
    <p style='color: #FFFFFF;'> 
    A arquitetura MobileNetSSD foi configurada e treinada utilizando o framework Caffe. O arquivo `MobileNetSSD_deploy.prototxt.txt` cont√©m a configura√ß√£o da rede, e `MobileNetSSD_deploy.caffemodel` √© o modelo treinado.
    </p>

    ```python
    import cv2

    # Carregar o modelo pr√©-treinado
    net = cv2.dnn.readNetFromCaffe('MobileNetSSD_deploy.prototxt.txt', 'MobileNetSSD_deploy.caffemodel')
    ```

    <h3 style='color: #007BFF;'>3. Treinamento do Modelo:</h3>
    <p style='color: #FFFFFF;'> 
    O treinamento foi realizado com o dataset VOC2007, que √© um benchmark popular para detec√ß√£o de objetos. O seguinte c√≥digo Python foi usado para iniciar o treinamento:
    </p>

    ```python
    # C√≥digo para treinar o modelo
    # Importar as bibliotecas necess√°rias
    import caffe
    from caffe import layers as L, params as P

    # Definir a arquitetura da rede
    def create_network():
        net = caffe.NetSpec()
        net.data, net.label = L.Data(source='data/train_lmdb', backend=P.Data.LMDB, batch_size=32, ntop=2)
        # Adicione camadas aqui
        return net.to_proto()
    
    # Salvar a arquitetura da rede
    with open('train.prototxt', 'w') as f:
        f.write(str(create_network()))
    ```

    <h3 style='color: #007BFF;'>4. Avalia√ß√£o e Ajuste:</h3>
    <p style='color: #FFFFFF;'> 
    Ap√≥s o treinamento, o modelo foi avaliado usando m√©tricas como precis√£o e recall. Ajustes foram feitos para otimizar o desempenho, e o modelo final foi salvo para uso em infer√™ncia.
    </p>

    <p style='color: #FFFFFF;'> 
    O c√≥digo acima mostra uma vis√£o geral do processo de treinamento do modelo MobileNetSSD. A configura√ß√£o da rede e o treinamento foram realizados usando frameworks espec√≠ficos e dados rotulados para garantir a efic√°cia do modelo em detec√ß√£o de objetos.
    </p>
    """, unsafe_allow_html=True)
